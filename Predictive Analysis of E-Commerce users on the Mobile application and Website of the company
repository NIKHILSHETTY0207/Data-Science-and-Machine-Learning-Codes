#Import pandas, numpy, matplotlib,and seaborn. Then set %matplotlib inline 

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline
import seaborn as sns

dataset=pd.read_csv("Ecommerce Customers")

dataset.head()
dataset.info()
dataset.describe()

sns.jointplot(x="Time on App",y="Yearly Amount Spent",data=dataset)

sns.jointplot(x="Time on Website",y="Yearly Amount Spent",kind="hex",data=dataset)

sns.pairplot(dataset)

sns.lmplot(x="Time on App",y="Yearly Amount Spent",data=dataset)

dataset.columns

y = dataset['Yearly Amount Spent']
X = dataset[['Avg. Session Length', 'Time on App','Time on Website', 'Length of Membership']]

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3)

from sklearn.linear_model import LinearRegression
lm = LinearRegression()

lm=lm.fit(X_train,y_train)
print(lm)

lm.coef_

prediction=lm.predict(X_test)
print(prediction)

plt.scatter(y_test,prediction)

plt.xlabel('Y Test')
plt.ylabel('prediction')


# calculate these metrics by hand!
from sklearn import metrics

print('MAE:', metrics.mean_absolute_error(y_test, prediction))

print('MSE:', metrics.mean_squared_error(y_test, prediction))

print('RMSE:', np.sqrt(metrics.mean_squared_error(y_test, prediction)))

metrics.explained_variance_score(y_test,prediction)

sns.distplot((y_test-prediction),bins=50)

#Conclusion
#We still want to figure out the answer to the original question, do we focus our efforst on mobile app or website development? Or maybe that doesn't even really matter, and Membership Time is what is really important. Let's see if we can interpret the coefficients at all to get an idea.

coeffecients = pd.DataFrame(lm.coef_,X.columns)
coeffecients.columns = ['Coeffecient']
coeffecients
