import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import keras

data=pd.read_csv("creditcard.csv")
data.head(10)

data.shape

data.describe()

data.info()

x=data.groupby("Class").count()
x

from sklearn.preprocessing import StandardScaler
data["Normalized amount"]=StandardScaler().fit_transform(data["Amount"].values.reshape(-1,1))
data["Normalized amount"]
data=data.drop(columns=["Amount"],axis=1)

data.drop(columns="Time",axis=1).head()

X=data.iloc[:,data.columns!="Class"]
y=data.iloc[:,data.columns=="Class"]

print(X.head())
#print("\n")
print(y.head())

from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.3)

X_train.shape

X_test.shape

y_train.shape

from sklearn.ensemble import RandomForestClassifier
rf=RandomForestClassifier(n_estimators=50)

rf.fit(X_train,y_train)

prediction=rf.predict(X_test)

from sklearn.metrics import confusion_matrix,classification_report
cm=confusion_matrix(y_test,prediction)
print(cm)

print(classification_report(y_test,prediction))

sns.heatmap(cm,cmap="coolwarm")

#Undersampling

#For the Majorty of the Samples

fraud_indices=np.array(data[data["Class"]==1].index)
#print(fraud_indices)
num_records_fraud=len(fraud_indices)
print(num_records_fraud)

#For the Minority of the Samples

normal_indices=np.array(data[data["Class"]==0].index)
num_records_norm=len(normal_indices)
#print(num_records_norm)

#Here I perform Undersampling on the Majority Class and reduce it to equal number of Minority Class

random_normal_indices=np.random.choice(normal_indices,num_records_fraud,replace=False)
random_normal_indices=np.array(random_normal_indices)
print(len(random_normal_indices))

#Here I check the sum of the number of the samples from both the classes

under_sample_indices=np.concatenate([fraud_indices,random_normal_indices])
print(len(under_sample_indices))
print(under_sample_indices)

x=under_sample_data.iloc[:,under_sample_data.columns !="Class"]
y=under_sample_data.iloc[:,under_sample_data.columns =="Class"]

x.shape
y.shape

from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test=train_test_split(x,y,test_size=0.3)

from sklearn.ensemble import RandomForestClassifier
rf=RandomForestClassifier(n_estimators=50)

rf.fit(X_train,y_train)

prediction=rf.predict(X_test)

from sklearn.metrics import confusion_matrix,classification_report
cm=confusion_matrix(y_test,prediction)
print(cm)

from sklearn.metrics import confusion_matrix,classification_report
cm=classification_report(y_test,prediction)
print(cm)
