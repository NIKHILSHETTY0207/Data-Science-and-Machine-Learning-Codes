import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.cluster import KMeans

data=pd.read_csv("Market Segmentation.csv")
data.head()

data.info()

data.describe()

plt.scatter(data["Satisfaction"],data["Loyalty"])

cluster_parameters=data.iloc[:,0:2]
cluster_parameters

sns.clustermap(cluster_parameters)

#Let us consider 3 clusters

Kmeans=KMeans(2)

Kmeans.fit(cluster_parameters)

Kmeans.inertia_

predicted_clusters=Kmeans.fit_predict(cluster_parameters)
predicted_clusters

data_copy=data.copy()
data_copy.head()

data_copy["Pred_clusters"]=predicted_clusters
data_copy

plt.scatter(data["Satisfaction"],data["Loyalty"],c=data_copy["Pred_clusters"],cmap="rainbow")
plt.xlabel("Satisfaction")
plt.ylabel("Loyalty")
plt.show

#Hence from the above graph it is clear that the Clustering is based in "Satisfaction" parameter only and not the "Loyalty" parameter
#Hence we need to Standardize the Data 

#from sklearn.preprocessing import StandardScaler
#s=StandardScaler(cluster_parameters)
#s

from sklearn import preprocessing
x_scaled=preprocessing.scale(cluster_parameters)
x_scaled

sns.clustermap(x_scaled)

wcss=[]

for i in range(1,10):
    x=KMeans(i)
    x.fit(x_scaled)
    wcss.append(x.inertia_)
wcss

plt.plot(range(1,10),wcss)
plt.xlabel("no. of clusters")
plt.ylabel("wcss")

data_copy2=data.copy()
data_copy2.head()

Kmeans=KMeans(2)
Kmeans.fit(x_scaled)

Kmeans.inertia_

predicted_clusters=Kmeans.fit_predict(x_scaled)
predicted_clusters

data_copy2["Pred_clusters"]=predicted_clusters
data_copy2

plt.scatter(data["Satisfaction"],data["Loyalty"],c=data_copy2["Pred_clusters"],cmap="rainbow")
plt.xlabel("Satisfaction")
plt.ylabel("Loyalty")
plt.show
