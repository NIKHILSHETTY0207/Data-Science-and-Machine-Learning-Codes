#For this project I will be exploring publicly available data from LendingClub.com.
#Lending Club connects people who need money (borrowers) with people who have money (investors). 
#Hopefully, as an investor you would want to invest in people who showed a profile of having a high probability of paying you back. 
#I will try to create a model that will help predict this.

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline
import seaborn as sns

lending_club=pd.read_csv("loan_data.csv")
lending_club.head()

lending_club.info()

lending_club.describe()

#EXPLORATORY DATA ANALYSIS

plt.figure(figsize=(10,12))
lending_club[lending_club["credit.policy"]==1]["fico"].hist(alpha=0.5,color='blue',bins=30,label='Credit.Policy=1')
lending_club[lending_club["credit.policy"]==0]["fico"].hist(alpha=0.5,color='red',bins=30,label='Credit.Policy=0')

plt.legend()
plt.xlabel('FICO')

plt.figure(figsize=(10,12))
lending_club[lending_club["not.fully.paid"]==1]["fico"].hist(alpha=0.5,color='blue',bins=30,label='not.fully.paid=1')
lending_club[lending_club["not.fully.paid"]==0]["fico"].hist(alpha=0.5,color='red',bins=30,label='not.fully.paid=0')

plt.legend()
plt.xlabel('FICO')

plt.figure(figsize=(10,12))
sns.distplot(lending_club["fico"])

plt.figure(figsize=(10,12))
sns.countplot(x='purpose',hue="not.fully.paid",data=lending_club)

sns.jointplot(x='fico',y='int.rate',data=lending_club,color='green')

sns.lmplot(y='int.rate',x='fico',data=lending_club,palette='Set1',hue='credit.policy',col='not.fully.paid')

cat_feats=["purpose"]
final_data=pd.get_dummies(lending_club,columns=cat_feats,drop_first=True)
final_data

#I used the DecisionTreeClassifier algorithm
dtree=DecisionTreeClassifier()

from sklearn.model_selection import train_test_split

X = final_data.drop('not.fully.paid',axis=1)
y = final_data['not.fully.paid']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.30)

dtree.fit(X_train,y_train)
predictions = dtree.predict(X_test)

from sklearn.metrics import classification_report,confusion_matrix
print(classification_report(y_test,predictions))

print(confusion_matrix(y_test,predictions))

#I used the RandomForestTree algorithm here

from sklearn.ensemble import RandomForestClassifier
rfc = RandomForestClassifier(n_estimators=600)

rfc.fit(X_train,y_train)
predictions = rfc.predict(X_test)

from sklearn.metrics import classification_report,confusion_matrix
print(classification_report(y_test,predictions))

print(confusion_matrix(y_test,predictions))
